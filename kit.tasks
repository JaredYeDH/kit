* meta
    * bugs
        [ ] fix serialization warnings
        [ ] serialization broken for arrays, booleans
    [-] switch keys to bimap for faster removal key changes
        # may need to do some research first... (drop-in won't work)
    [|] json serialization (recursive)
        [ ] use pure flag for json hint (serialize as [] vs. {}?)
        [.] fast type check instead of branching -- use typeid as offset
        [.] containers (vectors, maps?)
    [-] treespace locks
        # update: don't actually need this anymore with weak-locking system
        # optional read-writer lock on the entire treespace would be useful
        # treespace isn't all the data, just the hierarchy of Metas
        # for more complicated nested scenarios
        # only happens if Meta is associated with a treespace
        # another option would be to cache the root
    [-] faster index-in-parent look-up, possibly cached
        # update: don't actually need this anymore with weak-locking system
        # ---
        # ensure the parent pointer is respected in disconnect routines
        # incorporate m_IndexOfSelfInParent in add(), set(), etc.?
    [x] path
        # example: meta->path("this.is.a.path")
    [ ] path array indices
        # example: meta->path("items[3].subitems[1]")
    [ ] subdocument loading with a path
        # example: Meta("file.json:path.here")
    [-] binary
        [-] serial
        [-] deserial
    [|] Meta::Serializable
        [|] serialization
            [x] impl
            [ ] test
        [|] deserialization
            [x] impl
            [ ] test
    * iteration
        [-] move each() to .cpp file -- inl now
        [-] each_of_type<>() -- each() with check function isn't good enough?
        [-] any iteration -- each() is fine
    [L] input stream errors are vague and should include filename

* args
    [ ] .meta() -- create metaobject based on args
    
* kit.h (util)

* async
    [ ] coroutine exceptions don't make into Task promise (?)
        # happens in unit test for Coroutine unwinding
        # feature is impl'ed, so this is definitely a bug
    [ ] add way to yield to a specific multiplexer YIELD_MX()
        # needed since unit tests shouldn't use the singleton
    [-] task() and when() return scoped connections instead of future?

* log
    [ ] scoped log props are unusable across coroutines
    
* freq
    [ ] Timelines and Alarms must be wrap-safe, if we're ever going to use this
        # for async's sleep mechanism
    [L] Longer scheduling (days, months) would be nice
    [L] Persistent timelines and alarms using serialization

